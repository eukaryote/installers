#!/usr/bin/env bash

set -o pipefail

# Source utils if running as a script (not source ourselves). This is
# at the top so that variables and functions defined in this module override
# any defined in the util script that have the same name.
if [[ "${BASH_SOURCE:-$_}" = "${0}" ]]
then
    source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/install-util.sh" || {
        >&2 echo "ERROR: couldn't source install-util.sh script from installers directory"
        exit 1
    }
fi

REPOS="${REPOS:-$HOME/repos}"
CURL_BASE="${CURL_BASE:-/opt/curl}"
NGHTTP2_BASE="${NGHTTP2_BASE:-/opt/nghttp2}"


install_curl_main() {
    local curl_version="${1:?curl_version param is required}"
    local nghttp2_version="${2:-default}"

    local -r curl_dir="${REPOS}/curl"
    cd "${REPOS}" || return

    if [[ ! -d "${curl_dir}" ]]
    then
        command git clone --quiet https://github.com/curl/curl.git curl || return
        cd curl || return
    else
        cd curl || return
        command git checkout --quiet master
        command git pull --quiet --rebase --autostash --tags >/dev/null || return
    fi

    local curl_tag

    if [[ "${curl_version}" = "latest" ]]
    then
        curl_tag=$(get_latest_tag "${REPOS}"/curl "curl-") ||
            err "ERROR: couldn't determine latest curl version"||
            return
        curl_version=$(echo -n "${curl_tag}" | command grep -E -o '[0-9][-0-9\._]+' | tr '_' '.')
        echo "Using latest Curl version: ${curl_version}"
    else
        curl_tag="curl-$(tr '.' '_' <<<"${curl_version}")"
    fi

    local -r install_dir="${CURL_BASE}/${curl_version}"
    local -r nghttp2_dir="${NGHTTP2_BASE}/${nghttp2_version}"

    [ -d "${nghttp2_dir}" ] ||
        err "ERROR: couldn't find nghttp2 install at expected loction: ${nghttp2_dir}" ||
        return

    if [[ "${nghttp2_version}" = "default" ]]
    then
        echo "Using existing nghttp version: $(${nghttp2_dir}/bin/nghttp --version | command grep -E -o '/.*$' | command tail -c '+2')"
    fi

    command mkdir -p "${install_dir}" || return

    run_clean ./buildconf ||
        err "ERROR: buildconf failed" ||
        return

    run_clean ./configure --prefix="${install_dir}" --with-nghttp2="${nghttp2_dir}" --with-ssl --disable-shared ||
        err "ERROR: configure failed" ||
        return

    local make_command=()
    local -r ccache="$(which ccache 2>/dev/null)"
    [[ -s "${ccache}" ]] && make_command+=(ccache)

    make_command+=(make)
    run_clean "${make_command[@]}" || return
    run_clean make install || return
    add_default_symlink "${CURL_BASE}" "${curl_version}"
}

# run only if not sourced, so this script can be sourced for interactive use
if [[ "${BASH_SOURCE:-$_}" = "${0}" ]]
then
    if [[ -n "$*" ]]
    then
        install_curl_main "$@"
    else
        install_curl_main latest default
    fi
fi
