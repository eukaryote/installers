#!/usr/bin/env bash

set -o pipefail

# Source utils if running as a script (not source ourselves). This is
# at the top so that variables and functions defined in this module override
# any defined in the util script that have the same name.
if [[ "${BASH_SOURCE:-$_}" = "${0}" ]]
then
    source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/install-util.sh" || {
        >&2 echo "ERROR: couldn't source install-util.sh script from installers directory"
        exit 1
    }
fi

REPOS="${REPOS:-$HOME/repos}"
CURL_BASE="${CURL_BASE:-/opt/curl}"
NGHTTP2_BASE="${NGHTTP2_BASE:-/opt/nghttp2}"

install_curl_main() {
    local -r curl_version="${1:?curl_version param is required}"
    local -r nghttp2_version="${2:?nghttp2_version param is required}"

    local -r install_dir="${CURL_BASE}/${curl_version}"
    local -r nghttp2_dir="${NGHTTP2_BASE}/${nghttp2_version}"
    local -r curl_tag="curl-$(echo -n "${curl_version}" | tr '.' '_')"

    [ -d "${nghttp2_dir}" ] ||
        err "ERROR: couldn't find nghttp2 install at expected loction: ${nghttp2_dir}" ||
        return

    cd "${REPOS}/curl" ||
        err "ERROR: Git repo not found at expected location: ${REPOS}/curl" ||
        return

    git checkout "${curl_tag}" ||
        err "ERROR: error checking out git version ${curl_tag}" ||
        return

    command mkdir -p "${install_dir}" || return

    run_clean ./configure --prefix="${install_dir}" --with-nghttp2="${nghttp2_dir}" --with-ssl --disable-shared ||
        err "ERROR: configure failed" ||
        return

    local make_command=()
    local -r ccache="$(which ccache 2>/dev/null)"
    [[ -s "${ccache}" ]] && make_command+=(ccache)

    make_command+=(make)
    run_clean "${make_command[@]}" || return
    run_clean make install || return
    add_default_symlink "${CURL_BASE}" "${curl_version}"
}

# run only if not sourced, so this script can be sourced for interactive use
if [[ "${BASH_SOURCE:-$_}" = "${0}" ]]
then
    install_curl_main "$@"
fi
