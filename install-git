#!/usr/bin/env bash

set -uo pipefail

# Source utils if running as a script (not source ourselves). This is
# at the top so that variables and functions defined in this module override
# any defined in the util script that have the same name.
if [[ "${BASH_SOURCE:-$_}" = "${0}" ]]
then
    # shellcheck source=install-util.sh
    source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/install-util.sh" || {
        >&2 echo "ERROR: couldn't source install-util.sh script from installers directory"
        exit 1
    }
fi

REPOS="${REPOS:-$HOME/repos}"
GIT_BASE="${GIT_BASE:-/opt/git}"


# Compile and install Git to "${GIT_BASE:-/opt/git}/${version}" using require
# param to determine version (may be a numeric version string such as '2.13.5'
# or 'latest', which will be resolved to the latest version based on the tags
# in the repo).
install_git_main() {
    local version="${1:?version param is required}"

    if [[ ! -d "${REPOS}/git" ]]
    then
        cd "${REPOS}" || return
        command git clone --quiet https://github.com/git/git.git git || return
        cd git || return
    else
        cd "${REPOS}/git" || return
        command git checkout --quiet master || return
        command git pull --quiet --rebase --autostash --tags || return
    fi

    local version_tag
    if [[ "${version}" = "latest" ]]
    then
        version_tag=$(get_latest_tag .) || return
        version="${version_tag:1}"
        echo "Using latest version: ${version}"
    else
        version_tag="v${version}"
    fi

    command git checkout --quiet "${version_tag}" ||
        err "failed to checkout git version ${version} using tag ${version_tag}" ||
        return

    local install_dir
    install_dir="${GIT_BASE}/${version}" || return

    if [[ -f "${install_dir}/bin/git" ]]
    then
        err "Git version ${version} already exists: ${install_dir}"
        return 1
    fi
    mkdir -p "${install_dir}" || return

    local make_command=()
    local ccache
    ccache="$(which ccache 2>/dev/null)" || return
    [[ -s "${ccache}" ]] && make_command+=(ccache)
    make_command+=(make)

    run_clean "${make_command[@]}" CURLDIR="${REPOS}/curl" prefix="${install_dir}" all doc info || return
    run_clean make prefix="${install_dir}" install install-doc install-html install-info || return
    add_default_symlink "${GIT_BASE}" "${version}"
}

# run only if not sourced, so this script can be sourced for interactive use
if [[ "${BASH_SOURCE:-$_}" = "${0}" ]]
then
    if [[ -n "$*" ]]
    then
        install_git_main "$@"
    else
        install_git_main latest
    fi
fi
