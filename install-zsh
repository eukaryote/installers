#!/bin/sh

# Install Zsh 5.2 or newer, verifying GPG signature, and installing to
# ZSH_BASE/VERSION, where ZSH_BASE defaults to /opt/zsh if not provided.

# This script uses generic bourne-shell syntax and is intended to be free
# of bashisms and other non-posix extensions that would prevent it being
# used by any bourne-compatible shell.

# Echo params without the trailing newline (echo -n not defined for POSIX sh).
echon() {
    echo "$@" | head -c -1
}

EXT="${EXT:-$(if which xz > /dev/null 2>&1 ; then echon tar.xz; else echon tar.gz; fi)}"
ZSH_BASE="${ZSH_BASE:-/opt/zsh}"

# Only Zsh versions 5.2 and newer have GPG signatures on sourceforge, so
# we don't support older than 5.2, since that would complicate the logic
# and I don't care about versions older than 5.2 any longer.
SIGNED_GPG_VERSIONS="5.2"

url_base='https://downloads.sourceforge.net/zsh/zsh'

err() {
    rc=$?
    >&2 echo "$@"
    return $rc
}

precheck() {
    for prog in curl tar gpg
    do
        which "${prog}" >/dev/null 2>&1 ||
            err "ERROR: couldn't find required dependency '${prog}' on PATH" ||
            return
    done
}

prepare() {
    source_package=$1
    doc_package=$2
    version=$3
    build_dir=$4

    if [ -z "${source_package}" ] || [  -z "${doc_package}" ] || [ -z "${version}" ] || [ -z "${build_dir}" ]
    then
        err "usage: prepare source_package doc_package version build_dir"
        return 1
    fi

    [ -d "${build_dir}" ] ||
        err "ERROR: invalid directory: ${build_dir}" ||
        return

    install_dir="${ZSH_BASE}/${version}"
    mkdir -p "${install_dir}" || {
        rc=$?
        err "ERROR (${rc}): failed to create install dir: ${install_dir}"
        return $rc
    }

    [ ! -w "${install_dir}}" ] || {
        rc=$?
        err "ERROR (${rc}): install dir exists but is not writable: ${install_dir}"
        return "${rc}"
    }

    cd "${build_dir}" >/dev/null || return $?
    for file in "${source_package}" "${source_package}.asc" "${doc_package}" "${doc_package}.asc"
    do
        url="${url_base}/${version}/${file}"
        echo " - downloading: ${url}"
        curl -s --fail -L -g -o "${file}" "${url}" || {
            rc=$?
            err "ERROR (${rc}): couldn't download file from URL '${url}'"
            return "${rc}"
        }
    done

    echo " - verifying ${source_package}.asc ${source_package}"
    gpg --verify "${source_package}.asc" "${source_package}" > /dev/null 2>&1 || {
        rc=$?
        echo
        err "ERROR (${rc}): couldn't verify source package '${source_package}' signature '${source_package}.asc'"
        return "${rc}"
    }

    echo " - verifying ${doc_package}.asc ${doc_package}"
    gpg --verify "${doc_package}.asc" "${doc_package}" > /dev/null 2>&1 || {
        rc=$?
        err "ERROR (${rc}): couldn't verify doc package '${doc_package}' signature '${doc_package}.asc'"
        return "${rc}"
    }
    echo " - unpacking ${source_package}"
    tar xf "${source_package}" || return $?

    echo " - unpacking ${doc_package}"
    tar xf "${doc_package}"
}

make_build_dir() {
    version=$1
    [ -n "${version}" ] || {
        err "usage: make_build_dir VERSION"
        return
    }

    build_dir=$(umask 077 && mktemp -d -t install_zsh_"$(echon "${version}" | tr . _)"_XXXXXX) || {
        rc=$?
        err "Error ${rc} creating build dir using mktemp -d"
        err "Check \$TMPDIR and verify that it is set to a suitable directory"
        return $rc
    }
    echon "${build_dir}"
}


install_zsh_main() {
    precheck || return
    version=$1

    [ -n "${version}" ] ||
        err "usage: install_zsh VERSION" ||
        return

    [ "$(awk "BEGIN{ print \"${version}\"<\"${SIGNED_GPG_VERSIONS}\" }" < /dev/null)" != "1" ] ||
        err "ERROR: only installation of ${SIGNED_GPG_VERSIONS} and newer is supported" ||
        return

    install_dir="${ZSH_BASE}/${version}"
    [ ! -f "${install_dir}/bin/zsh" ] ||
        err "zsh version already exists: ${install_dir}/bin/zsh" ||
        return

    build_dir="$(make_build_dir "${version}")" || return

    trap 'rc=$?; set -u; command rm -rf "${build_dir}"; exit $rc' 0

    echo " - using build dir: ${build_dir}"
    echo " - using install dir: ${install_dir}"

    source_package="zsh-${version}.${EXT}"
    doc_package="zsh-${version}-doc.${EXT}"

    cd "${build_dir}" >/dev/null ||
        err "ERROR (${rc}): couldn't cd to build directory '${build_dir}'" ||
        return

    prepare "${source_package}" "${doc_package}" "${version}" "${build_dir}" || return
    package_dir="$(basename "${source_package}" ".${EXT}")" >/dev/null || return
    cd "${package_dir}" || return

    echon " - configuring"
     ./configure --prefix="${install_dir}" > "${build_dir}/configure.log" 2>&1 ||
        err "ERROR ($?): configure failed" ||
        return
    echo

    echon " - compiling"
    make > "${build_dir}/compile.log" 2>&1 ||
        err "ERROR ($?): make failed" ||
        return
    echo

    echon " - installing"
    make install > "${build_dir}/install.log" 2>&1 ||
        err "ERROR ($?): make install failed" ||
        return
    echo

    mkdir "${install_dir}/.build" ||
        err "ERROR ($?): couldn't create ${install_dir}/.build to store logs" ||
        return

    echo " - storing logs in ${install_dir}/.build"
    if test -n "$(find "${build_dir}" -maxdepth 1 -name '*.log' -print -quit)"
    then
        cp -p -u "${build_dir}"/*.log "${install_dir}"/.build/ || return
    fi

    return 0
 }


install_zsh_main "$@"
